#!/bin/bash

detect_color() {
    # set a fancy prompt (non-color, unless we know we "want" color)
    case "$TERM" in
        xterm-color|xterm-256color|linux) color_prompt=yes;;
        xterm) [ -n "$COLORTERM" ] && color_prompt=yes;;
    esac

    if [[ "$color_prompt" != yes ]] && which dircolors > /dev/null; then
        color_prompt=yes
        have_dircolors=yes
    fi

    # uncomment for testing colored prompt even if TERM isn't supported. Default is detect if the terminal has the capability.
    # Turned off by default to not distract the user: the focus in a terminal window
    # should be on the output of commands, not on the prompt
    #force_color_prompt=yes

    if [ -n "$force_color_prompt" ]; then
        if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
            # We have color support; assume it's compliant with Ecma-48
            # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
            # a case would tend to support setf rather than setaf.)
            color_prompt=yes
        else
            color_prompt=
        fi
    fi
}

setup_color() {
    # enable color support of ls and also add handy aliases
    debug_bashrc "Setting up color support"
    if [[ "$color_prompt" = 'yes' ]]; then
        if [[ "$have_dircolors" == yes ]]; then
            if [[ -r ~/.dircolors ]]; then
                DIRCOLOR_PREFERENCES=$HOME/.dircolors
            else
                DIRCOLOR_PREFERENCES=
            fi
            eval "$(dircolors -b $DIRCOLOR_PREFERENCES)"
            unset DIRCOLOR_PREFERENCES
        fi
        alias ls='ls --color=auto'
        #alias dir='dir --color=auto'
        #alias vdir='vdir --color=auto'

        alias grep='grep --color=auto'
        alias fgrep='fgrep --color=auto'
        alias egrep='egrep --color=auto'
    fi
}

detect_color
setup_color
unset have_dircolors
